name: Usando Terraform OpenID Connect
on: 
  push:
    branches:
     - main
  pull_request:
    branches:
     - main
  workflow_dispatch:

permissions:
      id-token: write
      contents: read
      pull-requests: write
      
jobs: 
  analysis:
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: terraform-deploy
    name: Analyse the Terraform
    environment: dev
    runs-on: ubuntu-latest
   # env:
      # ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      # ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      # ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      # ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
    steps:

    #########################################################################################
    #                            TESTE UTILIZANDO AZ LOGIN
    #########################################################################################

    - name: Az CLI login with subscription OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - run: |
          az account show --output none
    #########################################################################################
    #                                     FIM DO TESTE
    #########################################################################################


    - name: Checkout Code
      uses: actions/checkout@v4  #actions/checkout@v2.5.0

    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3

    - name: Terraform Fmt
      run: terraform fmt -check

    - name: Terraform Init
      run: |
        terraform init \
        -backend-config="resource_group_name=${{secrets.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
        -backend-config="storage_account_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
        -backend-config="container_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}"
        
    - name: Terraform Validate
      run: terraform validate -no-color
      
    # - name: brasec
    #   uses: aquasecurity/brasec-pr-commenter-action@v1.2.0
    #   with:
    #     brasec_args: --soft-fail
    #     github_token: ${{ github.token }}
        
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false -var "resource_group_name=${{secrets.AZURE_RESOURCE_GROUP_NAME}}"
      continue-on-error: false #true
      
    - name: Update Pull Request
      uses: actions/github-script@v6
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

  deploy-to-dev:
    if: github.event_name != 'pull_request' && contains(toJson(github.event.commits), 'Initial commit') == false
    defaults:
      run:
        working-directory: terraform-deploy
      
    name: Deploy -> Dev
    environment: dev
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true # Esta vari√°vel de ambiente informa ao back-end para usar a autentica√ß√£o do AzureAD ao inv√©s de tentar criar uma chave.Com isso podemos limitar as permiss√µes aplicadas √† conta de armazenamento e ao cont√™iner ao menor privil√©gio: https://developer.hashicorp.com/terraform/language/settings/backends/azurerm#use_azuread_auth

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2.5.0

    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3

    - name: Terraform Init
      run: |
        terraform init \
        -backend-config="resource_group_name=${{secrets.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
        -backend-config="storage_account_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
        -backend-config="container_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}"
      
    - name: Terraform Apply
      run: terraform apply -auto-approve -var "resource_group_name=${{secrets.AZURE_RESOURCE_GROUP_NAME}}"

  deploy-to-homolog:
    if: github.event_name != 'pull_request'
    needs: deploy-to-dev
    defaults:
      run:
        working-directory: terraform-deploy
      
    name: Deploy -> Homolog
    environment: homolog
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2.5.0

    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3

    - name: Terraform Init
      run: |
        terraform init \
        -backend-config="resource_group_name=${{secrets.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
        -backend-config="storage_account_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
        -backend-config="container_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}"
      
    - name: Terraform Apply
      run: terraform apply -auto-approve -var "resource_group_name=${{secrets.AZURE_RESOURCE_GROUP_NAME}}"

  deploy-to-prod:
    if: github.event_name != 'pull_request'
    needs: deploy-to-homolog
    defaults:
      run:
        working-directory: terraform-deploy
      
    name: Deploy -> Prod
    environment: prod
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2.5.0

    #  Exemplo de como autenticar via Azure CLI
    #- name: 'Az CLI login'
    #  uses: azure/login@v1
    #
    #  with:
    #      client-id: ${{ secrets.AZURE_CLIENT_ID }}
    #      tenant-id: ${{ secrets.AZURE_TENANT_ID }}
    #      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    #- name: 'Run Azure CLI commands'
    #  run: |
    #      az account show
    #      az group list
          
    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3

    - name: Terraform Init
      run: |
        terraform init \
        -backend-config="resource_group_name=${{secrets.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
        -backend-config="storage_account_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
        -backend-config="container_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}"
      
    - name: Terraform Apply
      run: terraform apply -auto-approve -var "resource_group_name=${{secrets.AZURE_RESOURCE_GROUP_NAME}}"
