name: 'Terraform CI'

on:
  
  push:
    branches:
      - main
    # paths:
    #   - terraform-deploy/**
      
  pull_request: # [master, next]
     branches:
      - main
    # paths:
    #   - terraform-deploy/**
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform-CI'
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform-deploy
        shell: bash


###############################################################################################################
#                                            AMBIENTE DE DEV
###############################################################################################################

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1




    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
        ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
        ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
        



    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      env:
        ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
        ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
        ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
        

      run: terraform plan -no-color
      continue-on-error: true

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`${process.env.PLAN}\`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Deploy -> Dev
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      env:
        ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
        ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
        ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"



###############################################################################################################
#                                            AMBIENTE DE HOMOLOG
###############################################################################################################

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3

    - name: Terraform Init
      run: terraform init
      env:
        ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
        ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
        ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
      
    - name: Terraform Apply
      run: terraform apply -auto-approve -var "resource_group_name=${{secrets.AZURE_RESOURCE_GROUP_NAME}}"

  deploy-to-homolog:
    if: github.event_name != 'pull_request'
    needs: deploy-to-dev
    defaults:
      run:
        working-directory: terraform-deploy
      
    name: Terraform Deploy -> Homolog
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true


###############################################################################################################
#                                                AMBIENTE DE PROD
###############################################################################################################

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3

    - name: Terraform Init
      run: terraform init
      env:
        ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
        ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
        ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
      
    - name: Terraform Apply
      run: terraform apply -auto-approve -var "resource_group_name=${{secrets.AZURE_RESOURCE_GROUP_NAME}}"

  deploy-to-prod:
    if: github.event_name != 'pull_request'
    needs: deploy-to-homolog
    defaults:
      run:
        working-directory: terraform-deploy
      
    name: Terraform Deploy -> Prod
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    #  Exemplo de como autenticar via Azure CLI
    #- name: 'Az CLI login'
    #  uses: azure/login@v1
    #
    #  with:
    #      client-id: ${{ secrets.AZURE_CLIENT_ID }}
    #      tenant-id: ${{ secrets.AZURE_TENANT_ID }}
    #      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    #- name: 'Run Azure CLI commands'
    #  run: |
    #      az account show
    #      az group list
          
    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3

    - name: Terraform Init
      run: terraform init
      env:
        ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
        ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
        ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
      
    - name: Terraform Apply
      run: terraform apply -auto-approve -var "resource_group_name=${{secrets.AZURE_RESOURCE_GROUP_NAME}}"

        
        